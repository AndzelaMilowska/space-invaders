{"version":3,"file":"mylib.js","mappings":"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","sources":["webpack://my-webpack-project/./src/app/constants/application-status.enum.ts","webpack://my-webpack-project/webpack/bootstrap","webpack://my-webpack-project/./src/app/canvas.ts","webpack://my-webpack-project/./src/app/appConfig/styles-config.ts","webpack://my-webpack-project/./src/app/appConfig/canvas-config-data.ts","webpack://my-webpack-project/./src/app/appConfig/menus-config.ts","webpack://my-webpack-project/./src/app/constants/constants.ts","webpack://my-webpack-project/./src/app/appConfig/bullets-config-01.ts","webpack://my-webpack-project/./src/app/appConfig/explosion-config-01.ts","webpack://my-webpack-project/./src/app/appConfig/player-config.ts","webpack://my-webpack-project/./src/app/appConfig/bullets-config-02.ts","webpack://my-webpack-project/./src/app/appConfig/explosion-config-02.ts","webpack://my-webpack-project/./src/app/appConfig/enemy01-config.ts","webpack://my-webpack-project/./src/app/appConfig/enemies-table-config.ts","webpack://my-webpack-project/./src/app/appConfig/enemy02-config.ts","webpack://my-webpack-project/./src/app/appConfig/ui-config.ts","webpack://my-webpack-project/./src/app/appConfig/game-config.ts","webpack://my-webpack-project/./src/app/actions/attack-actions.ts","webpack://my-webpack-project/./src/app/drawers/base-drawer.ts","webpack://my-webpack-project/./src/app/actions/collision-detector.ts","webpack://my-webpack-project/./src/app/drawers/animation-sequencer.ts","webpack://my-webpack-project/./src/app/actions/enemies/enemies-actions.ts","webpack://my-webpack-project/./src/app/actions/enemies/enemy-collision-detector.ts","webpack://my-webpack-project/./src/app/actions/ui-actions.ts","webpack://my-webpack-project/./src/index.ts","webpack://my-webpack-project/./src/app/appConfig/game-data.ts","webpack://my-webpack-project/./src/app/actions/player/player-actions.ts","webpack://my-webpack-project/./src/app/actions/gameplayActions.ts","webpack://my-webpack-project/./src/app/game-initialization.ts","webpack://my-webpack-project/./src/app/drawers/enemies-drawer.ts","webpack://my-webpack-project/./src/app/renderers/attacks-renderer.ts","webpack://my-webpack-project/./src/app/drawers/ui-drawer.ts","webpack://my-webpack-project/./src/app/renderers/player-renderer.ts","webpack://my-webpack-project/./src/app/renderers/explosion-renderer.ts","webpack://my-webpack-project/./src/app/renderers/enemies-renderer.ts","webpack://my-webpack-project/./src/app/renderers/ui-renderer.ts","webpack://my-webpack-project/./src/app/renderers/renderer.ts"],"sourcesContent":["export var ApplicationStatus;\n(function (ApplicationStatus) {\n    ApplicationStatus[\"StartScreen\"] = \"startScreen\";\n    ApplicationStatus[\"InGame\"] = \"inGame\";\n    ApplicationStatus[\"GameWin\"] = \"win\";\n    ApplicationStatus[\"GameLoose\"] = \"loose\";\n})(ApplicationStatus || (ApplicationStatus = {}));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export class Canvas {\n    canvasElement;\n    canvasContext2D;\n    constructor(canvasId, canvasConfigObject) {\n        this.canvasElement = document.getElementById(canvasId);\n        this.canvasContext2D = this.canvasElement.getContext(\"2d\");\n        this.canvasElement.width = canvasConfigObject.x;\n        this.canvasElement.height = canvasConfigObject.y;\n    }\n    get canvas() {\n        return this.canvasElement;\n    }\n    get canvasContext() {\n        return this.canvasContext2D;\n    }\n}\n","export const stylesConfig = {\n    primaryFont: \"pixel\",\n    primaryFontSize: \"30px\",\n    secondaryFontSize: \"20px\",\n    primaryFontStyle: \"#ffffff\",\n    titleFontSize: \"60px\",\n};\n","export const canvasConfig = {\n    x: 1000,\n    y: 750\n};\n","import { stylesConfig } from \"./styles-config\";\nimport { canvasConfig } from \"./canvas-config-data\";\nexport const menusConfig = {\n    startGame: {\n        coordinates: {\n            x: canvasConfig.x / 2,\n            y: canvasConfig.y - canvasConfig.y / 4,\n        },\n        fontConfig: `${stylesConfig.primaryFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n        text: \"PRESS ANY KEY TO START\",\n    },\n    howToPlayInfo: {\n        coordinates: {\n            x: canvasConfig.x / 2,\n            y: canvasConfig.y - canvasConfig.y / 6,\n        },\n        fontConfig: `${stylesConfig.secondaryFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n        text: `ATTACK X\n        MOVE ← → `,\n    },\n    scoreAdvancesTable: {\n        coordinates: {\n            x: canvasConfig.x / 2,\n            y: canvasConfig.y / 2,\n        },\n        fontConfig: `${stylesConfig.secondaryFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n    },\n    title: {\n        coordinates: {\n            x: canvasConfig.x / 2,\n            y: canvasConfig.y / 3,\n        },\n        fontConfig: `${stylesConfig.titleFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n        text: \"SPACE INVADERS\",\n    },\n    gameLoose: {\n        coordinates: {\n            x: canvasConfig.x / 2,\n            y: canvasConfig.y / 2,\n        },\n        fontConfig: `${stylesConfig.titleFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n        text: \"GAME OVER\",\n    },\n    gameWin: {\n        coordinates: {\n            x: canvasConfig.x / 2,\n            y: canvasConfig.y / 3 + 50,\n        },\n        fontConfig: `${stylesConfig.titleFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n        text: \"YOU WIN\",\n    },\n    backToMenu: {\n        coordinates: {\n            x: canvasConfig.x / 2,\n            y: canvasConfig.y - canvasConfig.y / 6,\n        },\n        fontConfig: `${stylesConfig.secondaryFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n        text: \"PRESS ANY KEY\", //`RETURN TO MAIN MENU`\n    },\n    highestScore: {\n        coordinates: {\n            x: canvasConfig.x / 2,\n            y: 30,\n        },\n        fontConfig: `${stylesConfig.secondaryFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n        text: `HI-SCORE: `,\n    },\n    newHighestScore: {\n        coordinates: {\n            x: canvasConfig.x / 2,\n            y: canvasConfig.y / 3 + 100,\n        },\n        fontConfig: `${stylesConfig.primaryFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n        text: `NEW RECORD!`,\n    },\n};\n","export const constants = {\n    PLAYER_IMGS: [\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Player_01.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Player_01.png')\n    ],\n    ENEMY_01_IMGS: [\n        require('/Users/nela/Programowo/space-invaders/src/imgs/enemy01_01.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/enemy01_02.png'),\n    ],\n    ENEMY_02_IMGS: [\n        require('/Users/nela/Programowo/space-invaders/src/imgs/enemy02_01.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/enemy02_02.png')\n    ],\n    FIRE_01_IMGS: [\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire01_01.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire01_02.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire01_03.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire01_04.png')\n    ],\n    FIRE_02_IMGS: [\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire02_01.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire02_02.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire02_03.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire02_04.png')\n    ],\n    FIRE_03_IMGS: [\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire03_01.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire03_02.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire03_03.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Fire03_04.png')\n    ],\n    ENEMY_01_EXPLOSION: [\n        require('/Users/nela/Programowo/space-invaders/src/imgs/kill.png')\n    ],\n    PLAYER_EXPLOSION: [\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Player_death01.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Player_death02.png'),\n        require('/Users/nela/Programowo/space-invaders/src/imgs/Player_death03.png')\n    ]\n};\n","import { constants } from '../constants/constants';\nexport const bulletsConfig_01 = {\n    frameStep: {\n        x: 0,\n        y: -3,\n    },\n    size: {\n        x: 7,\n        y: 21,\n    },\n    baseAnimationFrames: constants.FIRE_02_IMGS,\n    currentBaseAnimationFrame: '',\n    indexOfCurrentFrame: 0,\n    damage: 1,\n    frameSkip: 15\n};\n","import { constants } from \"../constants/constants\";\nexport let explosionConfig_01 = {\n    size: {\n        x: 16 * 3,\n        y: 8 * 3,\n    },\n    baseAnimationFrames: constants.PLAYER_EXPLOSION,\n    currentBaseAnimationFrame: \"\",\n    indexOfCurrentFrame: 0,\n    frameSkip: 15,\n    duration: 44\n};\n","import { constants } from \"../constants/constants\";\nimport { bulletsConfig_01 } from \"./bullets-config-01\";\nimport { explosionConfig_01 } from \"./explosion-config-01\";\nexport const playerConfig = {\n    size: {\n        x: 16 * 3,\n        y: 8 * 3,\n    },\n    frameStep: {\n        x: 5,\n        y: 0,\n    },\n    baseAnimationFrames: constants.PLAYER_IMGS,\n    currentBaseAnimationFrame: constants.PLAYER_IMGS[0],\n    indexOfCurrentFrame: 0,\n    lives: 3,\n    fireType: bulletsConfig_01,\n    fireFrequency: {\n        min: 50,\n        max: 55,\n    },\n    frameSkip: 1000,\n    deathAnimationConfig: explosionConfig_01,\n    timeToRespawn: 200,\n};\n","import { constants } from '../constants/constants';\nexport const bulletsConfig_02 = {\n    frameStep: {\n        x: 0,\n        y: 3,\n    },\n    size: {\n        x: 7,\n        y: 21,\n    },\n    baseAnimationFrames: constants.FIRE_01_IMGS,\n    currentBaseAnimationFrame: '',\n    indexOfCurrentFrame: 0,\n    damage: 1,\n    frameSkip: 15\n};\n","import { constants } from \"../constants/constants\";\nexport let explosionConfig_02 = {\n    size: {\n        x: 16 * 3,\n        y: 8 * 3,\n    },\n    baseAnimationFrames: constants.ENEMY_01_EXPLOSION,\n    currentBaseAnimationFrame: \"\",\n    indexOfCurrentFrame: 0,\n    frameSkip: 100,\n    duration: 20\n};\n","import { constants } from \"../constants/constants\";\nimport { bulletsConfig_02 } from \"./bullets-config-02\";\nimport { explosionConfig_02 } from \"./explosion-config-02\";\nexport const enemyConfig01 = {\n    size: {\n        x: 16 * 3,\n        y: 8 * 3,\n    },\n    frameStep: {\n        x: 2,\n        y: 0,\n    },\n    padding: 10,\n    lives: 1,\n    baseAnimationFrames: constants.ENEMY_01_IMGS,\n    currentBaseAnimationFrame: \"\",\n    indexOfCurrentFrame: 0,\n    scorePrice: 20,\n    fireType: bulletsConfig_02,\n    fireFrequency: {\n        min: 200,\n        max: 3000,\n    },\n    frameSkip: 50,\n    deathAnimationConfig: explosionConfig_02,\n};\n","import { enemyConfig01 } from \"./enemy01-config\";\nimport { enemyConfig02 } from \"./enemy02-config\";\nexport const enemiesConfig = {\n    totalRowsCount: 0,\n    enemiesCount: 0,\n    columnsCount: 11,\n    offsetTop: 50,\n    offsetLeft: 200,\n    frameStep: {\n        x: 12,\n        y: 12,\n    },\n    frameSkip: 50,\n    speedProgression: 2,\n    enemiesTable: [\n        {\n            type: enemyConfig01,\n            rowsCount: 2\n        },\n        {\n            type: enemyConfig02,\n            rowsCount: 3,\n        },\n    ],\n};\n","import { constants } from \"../constants/constants\";\nimport { bulletsConfig_02 } from \"./bullets-config-02\";\nimport { explosionConfig_02 } from \"./explosion-config-02\";\nexport const enemyConfig02 = {\n    size: {\n        x: 16 * 3,\n        y: 8 * 3,\n    },\n    frameStep: {\n        x: 2,\n        y: 0,\n    },\n    padding: 10,\n    lives: 1,\n    baseAnimationFrames: constants.ENEMY_02_IMGS,\n    currentBaseAnimationFrame: '',\n    indexOfCurrentFrame: 0,\n    scorePrice: 10,\n    fireType: bulletsConfig_02,\n    fireFrequency: {\n        min: 400,\n        max: 3000\n    },\n    frameSkip: 50,\n    deathAnimationConfig: explosionConfig_02,\n};\n","import { constants } from \"../constants/constants\";\nimport { canvasConfig } from \"./canvas-config-data\";\nimport { stylesConfig } from \"./styles-config\";\nexport const uiConfig = {\n    scoreConfig: {\n        coordinates: {\n            x: 8,\n            y: 30,\n        },\n        fontConfig: `${stylesConfig.secondaryFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n    },\n    playerLives: {\n        coordinates: {\n            x: canvasConfig.x - 180,\n            y: 30,\n        },\n        fontConfig: `${stylesConfig.secondaryFontSize} ${stylesConfig.primaryFont}`,\n        fontStyle: stylesConfig.primaryFontStyle,\n        icon: constants.PLAYER_IMGS[0],\n        iconSize: {\n            x: 16 * 2,\n            y: 8 * 2,\n        },\n    },\n};\n","import { canvasConfig } from \"./canvas-config-data\";\nimport { playerConfig } from \"./player-config\";\nimport { enemiesConfig } from \"./enemies-table-config\";\nimport { enemyConfig01 } from \"./enemy01-config\";\nimport { uiConfig } from \"./ui-config\";\nexport class Config {\n    countEnemiesLeftOffset() {\n        return (this.canvasConfig.x - this.enemiesConfig.columnsCount * (enemyConfig01.size.x + enemyConfig01.padding)) / 2;\n    }\n    enemiesConfig = enemiesConfig;\n    canvasConfig = canvasConfig;\n    playerConfig = playerConfig;\n    uiConfig = uiConfig;\n}\n","export class AttackActions {\n    moveBullet(elementData) {\n        elementData.coordinates.x += elementData.type.frameStep.x;\n        elementData.coordinates.y += elementData.type.frameStep.y;\n    }\n    spawnBullet(character, shootsArray) {\n        if (character.bulletCountdown > 0 || character.lives <= 0) {\n            return;\n        }\n        const newBullet = {\n            coordinates: {\n                x: character.coordinates.x + character.type.size.x / 2,\n                y: character.coordinates.y,\n            },\n            type: character.type.fireType,\n        };\n        shootsArray.push(newBullet);\n        character.bulletCountdown = this.calculateBulletCountdown(character.type.fireFrequency);\n    }\n    calculateBulletCountdown(frequency) {\n        return Math.floor(Math.random() * (frequency.max - frequency.min + 1) + frequency.min);\n    }\n}\n","import { Canvas } from \"../canvas\";\nexport class Drawer extends Canvas {\n    drawElement(characterData) {\n        let baseImage = new Image();\n        let elementConfig = characterData.type;\n        elementConfig.currentBaseAnimationFrame = elementConfig.baseAnimationFrames[elementConfig.indexOfCurrentFrame];\n        baseImage.src = elementConfig.currentBaseAnimationFrame;\n        this.canvasContext.imageSmoothingEnabled = false;\n        this.canvasContext.drawImage(baseImage, characterData.coordinates.x, characterData.coordinates.y, elementConfig.size.x, elementConfig.size.y);\n    }\n    drawText(textData, coordinates, fontConfig, fontStyle) {\n        this.canvasContext.font = fontConfig;\n        this.canvasContext.fillStyle = fontStyle;\n        this.canvasContext.fillText(textData, coordinates.x, coordinates.y);\n    }\n    drawCenteredText(textData, coordinates, fontConfig, fontStyle) {\n        this.canvasContext.font = fontConfig;\n        let textWidth = this.canvasContext.measureText(textData).width;\n        let centeredCoordinates = { x: coordinates.x - textWidth / 2, y: coordinates.y };\n        this.drawText(textData, centeredCoordinates, fontConfig, fontStyle);\n    }\n}\n","export class CollisionDetector {\n    static detectCollision(collidersArray, elementData, explosionsArray, callbackTasks) {\n        const elementConfig = elementData.type;\n        if (elementData.lives < 1) {\n            return;\n        }\n        for (let i = 0; i < collidersArray.length; i++) {\n            if (collidersArray[i].coordinates.y <= 0 || collidersArray[i].coordinates.y >= 1000) {\n                collidersArray.splice(i, 1);\n                return;\n            }\n            const elementLeftLedge = elementData.coordinates.x;\n            const elementRightLedge = elementLeftLedge + elementConfig.size.x;\n            const elementTopLedge = elementData.coordinates.y;\n            const elementBotLedge = elementTopLedge + elementConfig.size.y;\n            if (collidersArray[i].coordinates.x >= elementLeftLedge &&\n                collidersArray[i].coordinates.x <= elementRightLedge &&\n                collidersArray[i].coordinates.y >= elementTopLedge &&\n                collidersArray[i].coordinates.y <= elementBotLedge) {\n                collidersArray.splice(i, 1);\n                elementData.lives--;\n                this.explode(explosionsArray, elementData);\n                if (callbackTasks) {\n                    callbackTasks();\n                }\n                return;\n            }\n        }\n    }\n    static explode(explosionsArray, explodedElement) {\n        explosionsArray.push({\n            coordinates: {\n                x: explodedElement.coordinates.x,\n                y: explodedElement.coordinates.y,\n            },\n            type: explodedElement.type.deathAnimationConfig,\n            animationFrame: 0,\n        });\n    }\n}\n","export class AnimationSequencer {\n    static changeDisplayedImg(elementConfig) {\n        elementConfig.indexOfCurrentFrame =\n            elementConfig.indexOfCurrentFrame === elementConfig.baseAnimationFrames.length - 1 ? 0 : elementConfig.indexOfCurrentFrame + 1;\n    }\n}\n","import { AnimationSequencer } from \"../../drawers/animation-sequencer\";\nimport { AttackActions } from \"../attack-actions\";\nimport { ApplicationStatus } from \"../../constants/application-status.enum\";\nexport class EnemiesActions extends AttackActions {\n    gameData;\n    config;\n    constructor(gameData, gameConfig) {\n        super();\n        this.gameData = gameData;\n        this.config = gameConfig;\n    }\n    runEnemiesActions() {\n        const { enemiesTable } = this.gameData;\n        const { enemiesConfig } = this.config;\n        //make action only on desired frame count\n        if (this.gameData.currentFrameIndex % enemiesConfig.frameSkip !== 0) {\n            return;\n        }\n        else {\n            AnimationSequencer.changeDisplayedImg(enemiesConfig.enemiesTable[0].type);\n            AnimationSequencer.changeDisplayedImg(enemiesConfig.enemiesTable[1].type);\n            //if enemies are moving right find rightmost enemy, else enemies are moving left so find leftmost enemy\n            let sideMostEnemy;\n            let isCanvasTouched;\n            if (enemiesConfig.frameStep.x > 0) {\n                sideMostEnemy = this.findRightmostEnemy();\n                isCanvasTouched = this.isCanvasTouched(sideMostEnemy, true);\n            }\n            else {\n                sideMostEnemy = this.findLeftmostEnemy();\n                isCanvasTouched = this.isCanvasTouched(sideMostEnemy, false);\n            }\n            //if canvas is touched run onCanvasWallTouch, else continue enemies movement\n            if (isCanvasTouched) {\n                this.onCanvasWallTouch();\n            }\n            else {\n                enemiesTable.coordinates.x = enemiesTable.coordinates.x + enemiesConfig.frameStep.x;\n            }\n        }\n    }\n    isCanvasTouched(sideMostEnemy, movingRight) {\n        const { enemiesConfig, canvasConfig } = this.config;\n        if (movingRight) {\n            return sideMostEnemy.coordinates.x + enemiesConfig.frameStep.x + sideMostEnemy.type.size.x >= canvasConfig.x;\n        }\n        else {\n            return sideMostEnemy.coordinates.x + enemiesConfig.frameStep.x <= 0;\n        }\n    }\n    onCanvasWallTouch() {\n        const { enemiesTable } = this.gameData;\n        const { enemiesConfig } = this.config;\n        enemiesTable.coordinates.y = enemiesTable.coordinates.y - enemiesConfig.frameStep.y; //move fleet vertically\n        enemiesConfig.frameStep.x = enemiesConfig.frameStep.x * -1; //change fleet direction\n        enemiesConfig.frameSkip =\n            enemiesConfig.frameSkip <= 10 ? enemiesConfig.frameSkip : enemiesConfig.frameSkip - enemiesConfig.speedProgression; //speed up fleet movement\n    }\n    findLeftmostEnemy() {\n        const { enemies } = this.gameData;\n        let rowIndex = 0;\n        let columnIndex = 0;\n        while (enemies[rowIndex][columnIndex].lives < 1) {\n            if (rowIndex < enemies.length - 1) {\n                rowIndex++;\n            }\n            else if (rowIndex === enemies.length - 1 && columnIndex < enemies[0].length - 1) {\n                rowIndex = 0;\n                columnIndex++;\n            }\n            else if (columnIndex === enemies[enemies.length - 1].length - 1) {\n                return enemies[enemies.length - 1][enemies[0].length - 1];\n            }\n        }\n        return enemies[rowIndex][columnIndex];\n    }\n    findRightmostEnemy() {\n        const { enemies } = this.gameData;\n        let rowIndex = enemies.length - 1;\n        let columnIndex = enemies[enemies.length - 1].length - 1;\n        while (enemies[rowIndex][columnIndex].lives <= 0) {\n            if (rowIndex >= 1) {\n                rowIndex--;\n            }\n            else if (rowIndex === 0 && columnIndex > 0) {\n                columnIndex--;\n                rowIndex = enemies.length - 1;\n            }\n            else if (columnIndex === 0) {\n                return enemies[0][0];\n            }\n        }\n        return enemies[rowIndex][columnIndex];\n    }\n    iterateEnemies(callbackFn) {\n        for (let row = 0; row < this.gameData.enemies.length; row++) {\n            for (let column = 0; column < this.gameData.enemies[row].length; column++) {\n                const enemy = this.gameData.enemies[row][column];\n                callbackFn(enemy);\n            }\n        }\n    }\n    isOnBottom(element) {\n        if (element.coordinates.y <= this.config.canvasConfig.y - this.config.canvasConfig.y / 10) {\n            return;\n        }\n        this.gameData.gameStatus = ApplicationStatus.GameLoose;\n    }\n}\n","import { CollisionDetector } from \"../collision-detector\";\nexport class EnemyCollisionDetector extends CollisionDetector {\n    static detectEnemyCollision(gameData, enemy) {\n        let { playerShots } = gameData;\n        this.detectCollision(playerShots, enemy, gameData.currentExplosions, () => {\n            gameData.killsCount++;\n            if (!enemy.type.scorePrice)\n                return;\n            gameData.score = gameData.score + enemy.type.scorePrice * 0.00001;\n        });\n    }\n}\n","export class UiActions {\n    endGameMenuSprites;\n    initiateGameEndSprites(sprite01, sprite02, parentElement, numberOfEachSprite) {\n        let spritesArray = [];\n        for (let i = 0; i < numberOfEachSprite; i++) {\n            spritesArray.push({ ...sprite01 });\n            spritesArray.push({ ...sprite02 });\n        }\n        const spritesPadding = 10;\n        const totalSpritesWidth = sprite01.type.size.x * numberOfEachSprite + sprite02.type.size.x * numberOfEachSprite + (numberOfEachSprite - 1) * spritesPadding;\n        const xStart = parentElement.coordinates.x - totalSpritesWidth / 2 - sprite01.type.size.x / 4;\n        const y = parentElement.coordinates.y + sprite01.type.size.y;\n        spritesArray[0].coordinates = { x: xStart, y: y };\n        for (let i = 1; i < spritesArray.length; i++) {\n            spritesArray[i].coordinates = { x: spritesArray[i - 1].coordinates.x + spritesPadding + sprite02.type.size.x, y: y };\n        }\n        this.endGameMenuSprites = spritesArray;\n    }\n    listenForAnyKeyClick(callback) {\n        function onKeyDown(e) {\n            document.removeEventListener(\"keydown\", onKeyDown);\n            callback();\n        }\n        document.addEventListener(\"keydown\", onKeyDown);\n    }\n}\n","import \"./main.scss\";\nimport { Renderer } from \"./app/renderers/renderer\";\nimport { Config } from \"./app/appConfig/game-config\";\nimport { PlayerActions } from \"./app/actions/player/player-actions\";\nimport { Drawer } from \"./app/drawers/base-drawer\";\nimport { GameInitialization } from \"./app/game-initialization\";\nimport { GameplayData } from \"./app/appConfig/game-data\";\nimport { PlayerRenderer } from \"./app/renderers/player-renderer\";\nimport { EnemiesRenderer } from \"./app/renderers/enemies-renderer\";\nimport { EnemiesDrawer } from \"./app/drawers/enemies-drawer\";\nimport { EnemiesActions } from \"./app/actions/enemies/enemies-actions\";\nimport { GameplayActions } from \"./app/actions/gameplayActions\";\nimport { UIRenderer } from \"./app/renderers/ui-renderer\";\nimport { UIDrawer } from \"./app/drawers/ui-drawer\";\nimport { AttacksRenderer } from \"./app/renderers/attacks-renderer\";\nimport { ExplosionRenderer } from \"./app/renderers/explosion-renderer\";\nconst gameConfig = new Config();\nconst gameData = new GameplayData();\nconst playerActions = new PlayerActions();\nconst enemiesActions = new EnemiesActions(gameData, gameConfig);\nconst gameplayActions = new GameplayActions(gameConfig, gameData);\nconst gameInit = new GameInitialization(gameConfig, gameData, playerActions, enemiesActions);\nconst drawer = new Drawer(\"myCanvas\", gameConfig.canvasConfig);\nconst enemiesDrawer = new EnemiesDrawer(\"myCanvas\", gameConfig.canvasConfig);\nconst attacksRenderer = new AttacksRenderer(drawer);\nconst uiDrawer = new UIDrawer(\"myCanvas\", gameConfig.canvasConfig);\nconst playerRenderer = new PlayerRenderer(drawer, playerActions, gameConfig, gameData, attacksRenderer);\nconst explosionsRenderer = new ExplosionRenderer(drawer);\nconst enemiesRenderer = new EnemiesRenderer(gameConfig, gameData, enemiesDrawer, attacksRenderer);\nconst uiRenderer = new UIRenderer(uiDrawer, gameData, gameConfig.uiConfig);\nconst game = new Renderer(\"myCanvas\", gameConfig, gameData, playerRenderer, gameInit, enemiesRenderer, gameplayActions, uiRenderer, explosionsRenderer);\ngame.renderApplication();\n/*\n    TODO list:\n    - unit tests !!!!!\n*/\n","import { Config } from \"./game-config\";\nimport { ApplicationStatus } from \"../constants/application-status.enum\";\nexport class GameplayData extends Config {\n    currentFrameIndex = 0;\n    gameStatus = ApplicationStatus.StartScreen;\n    player = {\n        coordinates: {\n            x: (this.canvasConfig.x - this.playerConfig.size.x) / 2,\n            y: this.canvasConfig.y - this.playerConfig.size.y - 20,\n        },\n        lives: this.playerConfig.lives,\n        type: this.playerConfig,\n        timeToRespawn: 0,\n    };\n    enemies = [];\n    playerShots = [];\n    score = 0;\n    killsCount = 0;\n    enemyShots = [];\n    enemiesTable = {\n        skippedFrameCounter: 50,\n        coordinates: {\n            x: 0,\n            y: 0,\n        },\n    };\n    currentExplosions = [];\n    endgameTime = 0;\n    highestScore = 0;\n}\n","import { AttackActions } from \"../attack-actions\";\nexport class PlayerActions extends AttackActions {\n    isRightKeyPressed;\n    isLeftKeyPressed;\n    constructor() {\n        super();\n        this.isRightKeyPressed = false;\n        this.isLeftKeyPressed = false;\n    }\n    detectMovement() {\n        document.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"Right\" || e.key === \"ArrowRight\") {\n                this.isRightKeyPressed = true;\n            }\n            else if (e.key === \"Left\" || e.key === \"ArrowLeft\") {\n                this.isLeftKeyPressed = true;\n            }\n        }, false);\n        document.addEventListener(\"keyup\", (e) => {\n            if (e.key === \"Right\" || e.key === \"ArrowRight\") {\n                this.isRightKeyPressed = false;\n            }\n            else if (e.key === \"Left\" || e.key === \"ArrowLeft\") {\n                this.isLeftKeyPressed = false;\n            }\n        }, false);\n    }\n    movePlayer(configObject, gameData) {\n        let playerData = gameData.player;\n        let playerConfig = configObject.playerConfig;\n        if (this.isRightKeyPressed) {\n            playerData.coordinates.x = Math.min(playerData.coordinates.x + playerData.type.frameStep.x, configObject.canvasConfig.x - playerConfig.size.x);\n        }\n        else if (this.isLeftKeyPressed) {\n            playerData.coordinates.x = Math.max(playerData.coordinates.x - playerData.type.frameStep.x, 0);\n        }\n    }\n    playerAttack(gameData) {\n        document.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"x\") {\n                this.spawnBullet(gameData.player, gameData.playerShots);\n            }\n        });\n    }\n}\n","import { ApplicationStatus } from \"../constants/application-status.enum\";\nimport { UiActions } from \"./ui-actions\";\nexport class GameplayActions extends UiActions {\n    gameConfig;\n    gameData;\n    constructor(gameConfig, gameData) {\n        super();\n        this.gameConfig = gameConfig;\n        this.gameData = gameData;\n    }\n    isWin() {\n        if (this.gameConfig.enemiesConfig.enemiesCount === this.gameData.killsCount) {\n            this.gameData.gameStatus = ApplicationStatus.GameWin;\n        }\n        else if (this.gameData.player.lives < 1) {\n            this.gameData.gameStatus = ApplicationStatus.GameLoose;\n        }\n        if (this.gameData.gameStatus === ApplicationStatus.GameLoose || this.gameData.gameStatus === ApplicationStatus.GameWin) {\n            this.gameData.endgameTime++;\n        }\n    }\n}\n","import { menusConfig } from \"./appConfig/menus-config\";\nexport class GameInitialization {\n    config;\n    gameData;\n    player;\n    enemiesActions;\n    constructor(configObject, gameData, player, enemiesActions) {\n        this.config = configObject;\n        this.gameData = gameData;\n        this.player = player;\n        this.enemiesActions = enemiesActions;\n    }\n    initializeGame() {\n        this.config.enemiesConfig.offsetLeft = this.config.countEnemiesLeftOffset(); //count left offset start point\n        this.gameData.enemies = this.initializeEnemies(this.config.enemiesConfig);\n        this.calculateTotalEnemiesNumber(this.config.enemiesConfig);\n        this.player.detectMovement();\n        this.player.playerAttack(this.gameData);\n    }\n    calculateTotalEnemiesNumber(enemiesConfig) {\n        enemiesConfig.enemiesCount = enemiesConfig.columnsCount * enemiesConfig.totalRowsCount;\n    }\n    initializeEnemies(enemiesConfig) {\n        const { enemiesTable } = enemiesConfig;\n        let enemiesArray = [];\n        for (let i = 0; i < enemiesTable.length; i++) {\n            const rowsStartIndex = enemiesArray.length;\n            const rowsEndIndex = enemiesArray.length + enemiesTable[i].rowsCount;\n            for (let row = rowsStartIndex; row < rowsEndIndex; row++) {\n                enemiesConfig.totalRowsCount++;\n                enemiesArray[row] = [];\n                for (let column = 0; column < enemiesConfig.columnsCount; column++) {\n                    enemiesArray[row][column] = {\n                        //coordinates are set during drawing enemies, initializeEnemies is responsible only for initializing enemies array\n                        coordinates: { x: 0, y: 0 },\n                        lives: enemiesTable[i].type.lives,\n                        type: enemiesTable[i].type,\n                        bulletCountdown: this.enemiesActions.calculateBulletCountdown(enemiesTable[i].type.fireFrequency),\n                    };\n                }\n            }\n        }\n        return enemiesArray;\n    }\n    findHighestScore() {\n        let score = localStorage.getItem(\"hi-score\");\n        if (!score) {\n            score = \"00000\";\n            localStorage.setItem(\"hi-score\", score);\n        }\n        this.gameData.highestScore = +score;\n        menusConfig.highestScore.text = menusConfig.highestScore.text + this.gameData.highestScore.toFixed(5).substring(2);\n    }\n}\n","import { Drawer } from \"./base-drawer\";\nexport class EnemiesDrawer extends Drawer {\n    drawEnemies(gameData, enemiesConfig) {\n        const { enemies, enemiesTable } = gameData;\n        for (let row = 0; row < enemies.length; row++) {\n            for (let column = 0; column < enemies[row].length; column++) {\n                let enemy = enemies[row][column];\n                //change to 'if lives < 1 go next\n                if (enemy.lives > 0) {\n                    const enemyPositionX = column * (enemy.type.size.x + enemy.type.padding) + enemiesConfig.offsetLeft + enemiesTable.coordinates.x;\n                    const enemyPositionY = row * (enemy.type.size.y + enemy.type.padding) + enemiesConfig.offsetTop - enemiesTable.coordinates.y;\n                    enemy.coordinates = { x: enemyPositionX, y: enemyPositionY };\n                    this.drawElement(enemy);\n                }\n            }\n        }\n    }\n}\n","import { AttackActions } from \"../actions/attack-actions\";\nimport { AnimationSequencer } from \"../drawers/animation-sequencer\";\nexport class AttacksRenderer extends AttackActions {\n    drawer;\n    constructor(drawer) {\n        super();\n        this.drawer = drawer;\n    }\n    renderBullets(shootsArray, gameData) {\n        for (let i = 0; i < shootsArray.length; i++) {\n            this.drawer.drawElement(shootsArray[i]);\n            this.moveBullet(shootsArray[i]);\n            if (gameData.currentFrameIndex % shootsArray[i].type.frameSkip === 0) {\n                AnimationSequencer.changeDisplayedImg(shootsArray[i].type);\n            }\n        }\n    }\n}\n","import { Drawer } from \"./base-drawer\";\nimport { AnimationSequencer } from \"./animation-sequencer\";\nexport class UIDrawer extends Drawer {\n    drawScore(score, scoreConfig) {\n        this.drawText(`Score: ${score.toFixed(5).substring(2)}`, scoreConfig.coordinates, scoreConfig.fontConfig, scoreConfig.fontStyle);\n    }\n    drawPlayerLives(livesData, livesStyleConfig) {\n        this.drawText(`Lives: `, livesStyleConfig.coordinates, livesStyleConfig.fontConfig, livesStyleConfig.fontStyle);\n        for (let i = 0; i < livesData; i++) {\n            let baseImage = new Image();\n            baseImage.src = livesStyleConfig.icon;\n            this.canvasContext.drawImage(baseImage, livesStyleConfig.coordinates.x + i * livesStyleConfig.iconSize.x + 70, livesStyleConfig.coordinates.y - livesStyleConfig.iconSize.y - 1, livesStyleConfig.iconSize.x, livesStyleConfig.iconSize.y);\n        }\n    }\n    drawStartScreenTextElement(UIElement, message) {\n        const { text, coordinates, fontConfig, fontStyle } = UIElement;\n        this.drawCenteredText(text, coordinates, fontConfig, fontStyle);\n    }\n    drawScoreAdvancesTable(enemiesList, UIElement) {\n        const { coordinates, fontConfig, fontStyle } = UIElement;\n        const padding = 10;\n        for (let i = 0; i < enemiesList.length; i++) {\n            const text = ` = ${enemiesList[i].type.scorePrice} PTS`;\n            let textCoordinates = {\n                x: coordinates.x + enemiesList[i].type.size.x / 2,\n                y: coordinates.y - (i - 1) * (enemiesList[i].type.size.y + padding) + enemiesList[i].type.size.y - padding / 2,\n            };\n            this.drawCenteredText(text, textCoordinates, fontConfig, fontStyle);\n            let textWidth = this.canvasContext.measureText(text).width;\n            let iconCoordinates = {\n                x: coordinates.x - textWidth / 2 - enemiesList[i].type.size.x / 2,\n                y: coordinates.y - (i - 1) * (enemiesList[i].type.size.y + padding),\n            };\n            this.drawElement({ coordinates: iconCoordinates, type: enemiesList[i].type });\n        }\n    }\n    drawSprites(spritesArray, spritesTypesArray, gameData) {\n        for (let i = 0; i < spritesArray.length; i++) {\n            this.drawElement(spritesArray[i]);\n        }\n        if (gameData.currentFrameIndex % spritesTypesArray[0].frameSkip === 0) {\n            for (let i = 0; i < spritesTypesArray.length; i++) {\n                AnimationSequencer.changeDisplayedImg(spritesTypesArray[i]);\n            }\n        }\n    }\n}\n","import { CollisionDetector } from \"../actions/collision-detector\";\nexport class PlayerRenderer {\n    drawer;\n    player;\n    config;\n    gameData;\n    attacksRenderer;\n    constructor(drawer, player, config, gameData, attacksRenderer) {\n        this.drawer = drawer;\n        this.player = player;\n        this.config = config;\n        this.gameData = gameData;\n        this.attacksRenderer = attacksRenderer;\n    }\n    renderPlayer() {\n        let { enemyShots, player, playerShots } = this.gameData;\n        if (player.timeToRespawn > 0) {\n            player.timeToRespawn--;\n        }\n        else {\n            player.bulletCountdown--;\n            this.player.movePlayer(this.config, this.gameData);\n            this.drawer.drawElement(player);\n            CollisionDetector.detectCollision(enemyShots, player, this.gameData.currentExplosions, () => {\n                player.timeToRespawn = player.type.timeToRespawn;\n            });\n        }\n        this.attacksRenderer.renderBullets(playerShots, this.gameData);\n    }\n}\n","import { AnimationSequencer } from \"../drawers/animation-sequencer\";\nexport class ExplosionRenderer {\n    drawer;\n    constructor(drawer) {\n        this.drawer = drawer;\n    }\n    renderExplosions(explosionsArray) {\n        for (let i = 0; i < explosionsArray.length; i++) {\n            explosionsArray[i].animationFrame++;\n            if (explosionsArray[i].animationFrame >= explosionsArray[i].type.duration) {\n                explosionsArray.splice(i, 1);\n                return;\n            }\n            this.drawer.drawElement(explosionsArray[i]);\n            if (explosionsArray[i].animationFrame % explosionsArray[i].type.frameSkip === 0) {\n                AnimationSequencer.changeDisplayedImg(explosionsArray[i].type);\n            }\n        }\n    }\n}\n","import { EnemiesActions } from \"../actions/enemies/enemies-actions\";\nimport { EnemyCollisionDetector } from \"../actions/enemies/enemy-collision-detector\";\nexport class EnemiesRenderer extends EnemiesActions {\n    enemiesDrawer;\n    enemiesActions;\n    collisionDetector;\n    attacksRenderer;\n    constructor(config, gameData, enemiesDrawer, attacksRenderer) {\n        super(gameData, config);\n        this.config = config;\n        this.gameData = gameData;\n        this.enemiesDrawer = enemiesDrawer;\n        this.attacksRenderer = attacksRenderer;\n    }\n    renderEnemies() {\n        this.enemiesDrawer.drawEnemies(this.gameData, this.config.enemiesConfig);\n        this.runEnemiesActions();\n        this.iterateEnemies((enemy) => {\n            this.isOnBottom(enemy);\n            enemy.bulletCountdown--;\n            EnemyCollisionDetector.detectEnemyCollision(this.gameData, enemy);\n            this.spawnBullet(enemy, this.gameData.enemyShots);\n        });\n        this.attacksRenderer.renderBullets(this.gameData.enemyShots, this.gameData);\n    }\n}\n","import { menusConfig } from \"../appConfig/menus-config\";\nimport { enemiesConfig } from \"../appConfig/enemies-table-config\";\nimport { UiActions } from \"../actions/ui-actions\";\nimport { ApplicationStatus } from \"../constants/application-status.enum\";\nexport class UIRenderer extends UiActions {\n    uiDrawer;\n    gameData;\n    uiConfig;\n    constructor(uiDrawer, gameData, uiConfig) {\n        super();\n        this.uiDrawer = uiDrawer;\n        this.gameData = gameData;\n        this.uiConfig = uiConfig;\n    }\n    renderUI() {\n        this.uiDrawer.drawScore(this.gameData.score, this.uiConfig.scoreConfig);\n        this.uiDrawer.drawPlayerLives(this.gameData.player.lives, this.uiConfig.playerLives);\n    }\n    renderStartScreen() {\n        this.uiDrawer.drawStartScreenTextElement(menusConfig.title);\n        this.uiDrawer.drawScoreAdvancesTable(enemiesConfig.enemiesTable, menusConfig.scoreAdvancesTable);\n        this.uiDrawer.drawStartScreenTextElement(menusConfig.startGame);\n        this.uiDrawer.drawStartScreenTextElement(menusConfig.howToPlayInfo);\n        this.uiDrawer.drawStartScreenTextElement(menusConfig.highestScore);\n    }\n    renderEndScreen(gameStatus) {\n        let status = menusConfig.gameLoose;\n        this.uiDrawer.drawStartScreenTextElement(menusConfig.backToMenu);\n        if (gameStatus === ApplicationStatus.GameLoose) {\n            status = menusConfig.gameLoose;\n            this.uiDrawer.drawSprites(this.endGameMenuSprites, [this.gameData.enemies[0][0].type, this.gameData.enemies[this.gameData.enemies.length - 1][0].type], this.gameData);\n        }\n        else if (gameStatus === ApplicationStatus.GameWin) {\n            status = menusConfig.gameWin;\n            if (this.gameData.score > this.gameData.highestScore) {\n                this.gameData.highestScore = this.gameData.score;\n                localStorage.setItem(\"hi-score\", `${this.gameData.score.toFixed(5)}`);\n            }\n            if (this.gameData.score >= this.gameData.highestScore) {\n                this.uiDrawer.drawStartScreenTextElement(menusConfig.newHighestScore);\n                let scoreMessage = { ...menusConfig.newHighestScore };\n                scoreMessage.text = `${this.gameData.score.toFixed(5).substring(2)}`;\n                scoreMessage.coordinates = { ...menusConfig.newHighestScore.coordinates };\n                scoreMessage.coordinates.y = menusConfig.newHighestScore.coordinates.y + 30;\n                this.uiDrawer.drawStartScreenTextElement(scoreMessage);\n            }\n        }\n        this.uiDrawer.drawStartScreenTextElement(status);\n    }\n}\n","import { Canvas } from \"../canvas\";\nimport { ApplicationStatus } from \"../constants/application-status.enum\";\nimport { menusConfig } from \"../appConfig/menus-config\";\nexport class Renderer extends Canvas {\n    interval;\n    config;\n    gameInit;\n    gameData;\n    gameplayActions;\n    playerRenderer;\n    enemiesRenderer;\n    uiRenderer;\n    explosionsRenderer;\n    constructor(canvasId, configObject, gameData, playerRenderer, gameInit, enemiesRenderer, gameplayActions, uiRenderer, explosionsRenderer) {\n        super(canvasId, configObject.canvasConfig);\n        this.config = configObject;\n        this.gameInit = gameInit;\n        this.playerRenderer = playerRenderer;\n        this.enemiesRenderer = enemiesRenderer;\n        this.gameplayActions = gameplayActions;\n        this.uiRenderer = uiRenderer;\n        this.gameData = gameData;\n        this.explosionsRenderer = explosionsRenderer;\n    }\n    renderGame() {\n        if (this.gameData.gameStatus === ApplicationStatus.InGame) {\n            this.gameInit.initializeGame();\n            this.interval = setInterval(() => {\n                this.canvasContext.clearRect(0, 0, this.config.canvasConfig.x, this.config.canvasConfig.y);\n                this.playerRenderer.renderPlayer();\n                this.enemiesRenderer.renderEnemies();\n                this.explosionsRenderer.renderExplosions(this.gameData.currentExplosions);\n                this.uiRenderer.renderUI();\n                this.gameplayActions.isWin();\n                this.gameData.currentFrameIndex += 1;\n                if (this.gameData.endgameTime >= 50) {\n                    clearInterval(this.interval);\n                    this.renderApplication();\n                }\n            }, 10);\n        }\n    }\n    renderStartScreen() {\n        this.uiRenderer.listenForAnyKeyClick(() => {\n            this.gameData.gameStatus = ApplicationStatus.InGame;\n            clearInterval(this.interval);\n            this.renderApplication();\n        });\n        this.interval = setInterval(() => {\n            this.canvasContext.clearRect(0, 0, this.config.canvasConfig.x, this.config.canvasConfig.y);\n            this.uiRenderer.renderStartScreen();\n        }, 10);\n    }\n    renderEndScreen(endStatus) {\n        let message = \"\";\n        if (endStatus === ApplicationStatus.GameLoose) {\n            message = menusConfig.gameLoose.text;\n            this.uiRenderer.initiateGameEndSprites(this.gameData.enemies[0][0], this.gameData.enemies[this.gameData.enemies.length - 1][0], menusConfig.gameLoose, 3);\n        }\n        else if (endStatus === ApplicationStatus.GameWin) {\n            message = menusConfig.gameWin.text;\n        }\n        this.uiRenderer.listenForAnyKeyClick(() => {\n            this.gameData.gameStatus = ApplicationStatus.StartScreen;\n            clearInterval(this.interval);\n            document.location.reload();\n        });\n        this.interval = setInterval(() => {\n            this.canvasContext.clearRect(0, 0, this.config.canvasConfig.x, this.config.canvasConfig.y);\n            this.uiRenderer.renderEndScreen(this.gameData.gameStatus);\n            this.gameData.currentFrameIndex++;\n        }, 10);\n    }\n    renderApplication() {\n        this.gameInit.findHighestScore();\n        if (this.gameData.gameStatus === ApplicationStatus.StartScreen) {\n            this.renderStartScreen();\n        }\n        if (this.gameData.gameStatus === ApplicationStatus.InGame) {\n            this.renderGame();\n        }\n        if (this.gameData.gameStatus === ApplicationStatus.GameLoose || this.gameData.gameStatus === ApplicationStatus.GameWin) {\n            this.renderEndScreen(this.gameData.gameStatus);\n        }\n    }\n}\n"],"names":["ApplicationStatus","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","Canvas","canvasElement","canvasContext2D","constructor","canvasId","canvasConfigObject","this","document","getElementById","getContext","width","x","height","y","canvas","canvasContext","stylesConfig","canvasConfig","menusConfig","startGame","coordinates","fontConfig","fontStyle","text","howToPlayInfo","scoreAdvancesTable","title","gameLoose","gameWin","backToMenu","highestScore","newHighestScore","constants","PLAYER_IMGS","ENEMY_01_IMGS","ENEMY_02_IMGS","FIRE_01_IMGS","FIRE_02_IMGS","FIRE_03_IMGS","ENEMY_01_EXPLOSION","PLAYER_EXPLOSION","bulletsConfig_01","frameStep","size","baseAnimationFrames","currentBaseAnimationFrame","indexOfCurrentFrame","damage","frameSkip","explosionConfig_01","duration","playerConfig","lives","fireType","fireFrequency","min","max","deathAnimationConfig","timeToRespawn","bulletsConfig_02","explosionConfig_02","enemyConfig01","padding","scorePrice","enemiesConfig","totalRowsCount","enemiesCount","columnsCount","offsetTop","offsetLeft","speedProgression","enemiesTable","type","rowsCount","uiConfig","scoreConfig","playerLives","icon","iconSize","Config","countEnemiesLeftOffset","AttackActions","moveBullet","elementData","spawnBullet","character","shootsArray","bulletCountdown","newBullet","push","calculateBulletCountdown","frequency","Math","floor","random","Drawer","drawElement","characterData","baseImage","Image","elementConfig","src","imageSmoothingEnabled","drawImage","drawText","textData","font","fillStyle","fillText","drawCenteredText","textWidth","measureText","centeredCoordinates","CollisionDetector","detectCollision","collidersArray","explosionsArray","callbackTasks","i","length","splice","elementLeftLedge","elementRightLedge","elementTopLedge","elementBotLedge","explode","explodedElement","animationFrame","AnimationSequencer","changeDisplayedImg","EnemiesActions","gameData","config","gameConfig","super","runEnemiesActions","currentFrameIndex","sideMostEnemy","isCanvasTouched","findRightmostEnemy","findLeftmostEnemy","onCanvasWallTouch","movingRight","enemies","rowIndex","columnIndex","iterateEnemies","callbackFn","row","column","isOnBottom","element","gameStatus","GameLoose","EnemyCollisionDetector","detectEnemyCollision","enemy","playerShots","currentExplosions","killsCount","score","UiActions","endGameMenuSprites","initiateGameEndSprites","sprite01","sprite02","parentElement","numberOfEachSprite","spritesArray","totalSpritesWidth","xStart","listenForAnyKeyClick","callback","addEventListener","onKeyDown","e","removeEventListener","StartScreen","player","enemyShots","skippedFrameCounter","endgameTime","playerActions","isRightKeyPressed","isLeftKeyPressed","detectMovement","key","movePlayer","configObject","playerData","playerAttack","enemiesActions","gameplayActions","isWin","GameWin","gameInit","initializeGame","initializeEnemies","calculateTotalEnemiesNumber","enemiesArray","rowsStartIndex","rowsEndIndex","findHighestScore","localStorage","getItem","setItem","toFixed","substring","drawer","enemiesDrawer","drawEnemies","enemyPositionX","enemyPositionY","attacksRenderer","renderBullets","uiDrawer","drawScore","drawPlayerLives","livesData","livesStyleConfig","drawStartScreenTextElement","UIElement","message","drawScoreAdvancesTable","enemiesList","textCoordinates","iconCoordinates","drawSprites","spritesTypesArray","playerRenderer","renderPlayer","explosionsRenderer","renderExplosions","enemiesRenderer","collisionDetector","renderEnemies","uiRenderer","renderUI","renderStartScreen","renderEndScreen","status","scoreMessage","game","interval","renderGame","InGame","setInterval","clearRect","clearInterval","renderApplication","endStatus","location","reload"],"sourceRoot":""}